#!/bin/sh
#
# Copy the exported app from flutterflow-export/ to local-stage/ and apply
# patches.
#
# --export will export a fresh copy from flutterflow before making the copy.
#
set -e

THIS_PROJECT=`pwd`/`dirname $0`/..
LOCAL_STAGE=$THIS_PROJECT/local-stage
EXPORT_DIR=$THIS_PROJECT/flutterflow-export
PATCHES=$THIS_PROJECT/patches

if [ "$1" = "--export" ]; then
    $THIS_PROJECT/bin/flutterflow-export
fi

echo "LOCAL_STAGE: $LOCAL_STAGE"
rm -rf $LOCAL_STAGE/lib $LOCAL_STAGE/web $LOCAL_STAGE/assets $LOCAL_STAGE/pubspec* 
mkdir -p $LOCAL_STAGE
cp -rf $EXPORT_DIR/* $LOCAL_STAGE/.
cd $LOCAL_STAGE

echo "\nApplying patches ..."

echo "\nPatch 1: api call addresses to localhost ...\n\nreplacing remote addresses with local addresses in api_calls.dart"
sed -i -e 's/https:\/\/qecg6jbdmm[^\/]*/http:\/\/localhost:8080/' lib/backend/api_requests/api_calls.dart
sed -i -e 's/https:\/\/c2xw3up7c7[^\/]*/http:\/\/localhost:8090/' lib/backend/api_requests/api_calls.dart

echo "\nPatch 2: supabase address and key to localhost ...\n"
patch -p0 < $PATCHES/local/supabase.dart.patch

echo "\nPatch 3: fix for gh://FlutterFlow/flutterflow-issues #1471 ...\n"
patch -p0 < $PATCHES/fixes/fix-flutterflow-github-issue-1471.patch

if [ ! -f ".fvm" ]; then  
    if ! type fvm >/dev/null; then
      echo "\nfvm not installed.\n\nsee https://fvm.app/docs/getting_started/installation for installation details.\n"
      exit 1
    fi
fi
fvm use `cat $THIS_PROJECT/.flutter-version`
