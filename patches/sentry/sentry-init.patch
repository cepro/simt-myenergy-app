--- ./lib/main.dart
+++ ./lib/main.dart
@@ -5,6 +5,7 @@
 
 import 'package:flutter_localizations/flutter_localizations.dart';
 import 'package:flutter_web_plugins/url_strategy.dart';
+import 'package:sentry_flutter/sentry_flutter.dart';
 
 import 'auth/supabase_auth/supabase_user_provider.dart';
 import 'auth/supabase_auth/auth_util.dart';
@@ -20,40 +21,48 @@
 import 'package:flutter/foundation.dart' show kDebugMode;
 
 void main() async {
-  WidgetsFlutterBinding.ensureInitialized();
-  GoRouter.optionURLReflectsImperativeAPIs = true;
-  usePathUrlStrategy();
-
-  // Set the ErrorWidget's builder before the app is started.
-  // From: https://api.flutter.dev/flutter/widgets/ErrorWidget-class.html
-  ErrorWidget.builder = (FlutterErrorDetails details) {
-    print('Error occurred: ${details.exception}');
-    print('Stack trace: ${details.stack}');
-
-    // If we're in debug mode, use the normal error widget which shows the error
-    // message:
-    if (kDebugMode) {
-      return ErrorWidget(details.exception);
-    }
-    // In release builds, show a yellow-on-blue message instead:
-    return ReleaseModeErrorWidget(details: details);
-  };
-
-  await SupaFlow.initialize();
-
-  await FlutterFlowTheme.initialize();
-
-  final appState = FFAppState(); // Initialize FFAppState
-  await appState.initializePersistedState();
-
-  // Start final custom actions code
-  await actions.initSupabaseRealtimeSubscriptions();
-  // End final custom actions code
-
-  runApp(ChangeNotifierProvider(
-    create: (context) => appState,
-    child: MyApp(),
-  ));
+  await SentryFlutter.init((options) {
+    options.dsn =
+        'https://b378c6db98e5c54511fc29154355f563@o4506409083994112.ingest.sentry.io/4506409085042688';
+    // Set tracesSampleRate to 1.0 to capture 100% of transactions for performance monitoring.
+    // We recommend adjusting this value in production.
+    options.tracesSampleRate = 1.0;
+  }, appRunner: () async {
+    WidgetsFlutterBinding.ensureInitialized();
+    GoRouter.optionURLReflectsImperativeAPIs = true;
+    usePathUrlStrategy();
+  
+    // Set the ErrorWidget's builder before the app is started.
+    // From: https://api.flutter.dev/flutter/widgets/ErrorWidget-class.html
+    ErrorWidget.builder = (FlutterErrorDetails details) {
+      print('Error occurred: ${details.exception}');
+      print('Stack trace: ${details.stack}');
+  
+      // If we're in debug mode, use the normal error widget which shows the error
+      // message:
+      if (kDebugMode) {
+        return ErrorWidget(details.exception);
+      }
+      // In release builds, show a yellow-on-blue message instead:
+      return ReleaseModeErrorWidget(details: details);
+    };
+  
+    await SupaFlow.initialize();
+  
+    await FlutterFlowTheme.initialize();
+  
+    final appState = FFAppState(); // Initialize FFAppState
+    await appState.initializePersistedState();
+  
+    // Start final custom actions code
+    await actions.initSupabaseRealtimeSubscriptions();
+    // End final custom actions code
+  
+    runApp(ChangeNotifierProvider(
+      create: (context) => appState,
+      child: MyApp(),
+    ));
+  });
 }
 
 class ReleaseModeErrorWidget extends StatelessWidget {
--- ./pubspec.yaml
+++ ./pubspec.yaml
@@ -64,6 +64,7 @@
   provider: 6.1.2
   realtime_client: 1.4.0
   rxdart: 0.27.7
+  sentry_flutter: 8.14.2
   shared_preferences: 2.3.2
   shared_preferences_android: 2.3.2
   shared_preferences_foundation: 2.5.2

